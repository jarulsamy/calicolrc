Index: modules/Graphics/Graphics.cs
===================================================================
--- modules/Graphics/Graphics.cs	(revision 489)
+++ modules/Graphics/Graphics.cs	(working copy)
@@ -396,6 +396,7 @@
     //int getHeight();
     void stackOnTop(Shape shape);
     void stackOnBottom(Shape shape);
+    Gnome.CanvasGroup Root();
     string getMode();
     Gdk.Drawable getDrawable();
     void update();
@@ -420,6 +421,10 @@
     public _Canvas getCanvas() {
       return _canvas;
     }
+    public Gnome.CanvasGroup Root() {
+      return _canvas.Root();
+    }
+
     public string getMode() {
       return _canvas.mode;
     }
@@ -456,6 +461,10 @@
       ShowAll();
     }
 
+    public Gnome.CanvasGroup Root() {
+      return _canvas.Root();
+    }
+
     public Gdk.Drawable getDrawable() {
       return GdkWindow;
     }
@@ -726,8 +735,29 @@
 
   }
   
-  public class _Canvas : Gtk.DrawingArea {
+  public class _Canvas: Gnome.Canvas {
+    public List<Shape> shapes = new List<Shape>();
+    private string _mode;
     
+    public _Canvas(string mode) : base(false) { //anti-alias
+      _mode = mode;
+    }
+
+    public string mode {
+      get {
+	return _mode;
+      }
+      set {
+	if (value == "manual" || value == "auto")
+	  _mode = value;
+	else
+	  throw new Exception("canvas mode must be 'manual' or 'auto'");
+      }
+    }    
+  }
+
+  public class _OldCanvas : Gtk.DrawingArea {
+    
     // Shape.draw() will add them here:
     public List<Shape> shapes = new List<Shape>();
     private string _mode;
@@ -744,7 +774,7 @@
 	  }
     }
 	
-    public _Canvas(string mode) : base() {
+    public _OldCanvas(string mode) : base() {
 	  this.mode = mode;
     }
 	
@@ -768,6 +798,7 @@
   } 
   
   public class Shape {
+    public Gnome.CanvasItem item;
     public Point center;
     public ICanvas window;
     internal double _rotation; // radians
@@ -1067,8 +1098,18 @@
     }
     
     public void rotateTo(double degrees) {
-      _rotation = degrees * (Math.PI) / 180.0;
-      QueueDraw();
+      //_rotation = degrees * (Math.PI) / 180.0;
+      //QueueDraw();
+    
+    
+      // a = Array[float]([0, 0, 0, 0, 0, 0])
+      // Art.Affine.Rotate(a, 90)
+      // line.AffineRelative(a)
+
+      double [] a = new double[] {0, 0, 0, 0, 0, 0};
+      Art.Affine.Identity(a);
+      Art.Affine.Rotate(a, degrees);
+      item.AffineAbsolute(a);
     }
     
     public void scale(double percent) {
@@ -1220,20 +1261,31 @@
   }
 
   public class Line : Shape {
-	public Line(IList iterable1, IList iterable2) :
-	this(new Point(iterable1[0], iterable1[1]), 
-	     new Point(iterable2[0], iterable2[1])) {
-	}
+    public Line(IList iterable1, IList iterable2) :
+    this(new Point(iterable1[0], iterable1[1]), 
+	 new Point(iterable2[0], iterable2[1])) {
+    }
     public Line(Point p1, Point p2) : this(true, p1, p2) {
     }
     public Line(bool has_pen, IList iterable1, IList iterable2) : 
-              this(has_pen, 
-		   new Point(iterable1[0], iterable1[1]), 
-		   new Point(iterable2[0], iterable2[1])) {
+    this(has_pen, 
+	 new Point(iterable1[0], iterable1[1]), 
+	 new Point(iterable2[0], iterable2[1])) {
     }
     public Line(bool has_pen, Point p1, Point p2) : base(has_pen) {
       set_points(p1, p2);
     }
+    
+    public new void draw(ICanvas canvas) {
+      item = new Gnome.CanvasLine(canvas.Root());
+      double [] data = new double[points.Length * 2];
+      int i = 0;
+      foreach (Point point in points) {
+	data[i++] = point.x;
+	data[i++] = point.y;
+      }
+      ((Gnome.CanvasLine)item).Points = new Gnome.CanvasPoints (data); 
+    }
   }
 
   public class Curve : Shape {
Index: modules/Graphics/Makefile
===================================================================
--- modules/Graphics/Makefile	(revision 489)
+++ modules/Graphics/Makefile	(working copy)
@@ -12,6 +12,8 @@
 		-r:Mono.Cairo.dll \
 		-r:GifLib.dll \
 		-pkg:gtk-sharp-2.0 \
+		-pkg:gnome-sharp-2.0 \
+		-pkg:art-sharp-2.0 \
 		-out:../Graphics.dll 
 
 clean::
Index: modules/Graphics.dll
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream
